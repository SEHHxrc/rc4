class RC4:
    def __init__(self, key: bytes):
        """
        RC4 cryptography
        """
        self.__key = key
        self.__len = len(self.__key)
        self.__ksa()
        self.__keys = b''

    def __ksa(self):
        """
        Initial replacement S
        """
        j = 0
        self.__s = list(range(256))
        self.__t = [self.__key[i % self.__len] for i in range(256)]
        for i in range(256):
            j = (j + self.__s[i] + self.__t[i]) % 256
            self.__s[i], self.__s[j] = self.__s[j], self.__s[i]

    def __prga(self, length):
        """
        Generate stream key
        """
        i = 0
        j = 0
        for _ in range(length):
            i = i + 1 % 256
            j = (j + self.__s[i]) % 256
            self.__s[i], self.__s[j] = self.__s[j], self.__s[i]
            t = (self.__s[i] + self.__s[j]) % 256
            self.__keys += int.to_bytes(self.__s[t], 1, 'little')

    def get_key(self):
        return self.__keys

    def encrypt(self, plaintext):
        """
        Encrypt the plaintext with key which is generated by user's key.
        """
        self.__prga(len(plaintext))
        cipher = b''.join(int.to_bytes(self.__keys[i] ^ plaintext[i], 1, 'little') for i in range(len(plaintext)))
        return cipher

    def decrypt(self, ciphertext):
        """
        Decrypt the cipher
        """
        return self.encrypt(ciphertext)


if __name__ == '__main__':
    rc4 = RC4(b'test')
    print(rc4.encrypt(b'abcd'))
